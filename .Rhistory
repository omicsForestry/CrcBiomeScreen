num_cores = 10)
packageVersion("xgboost")
devtools::install()
library(CrcBiomeScreen)
devtools::document()
# CrcBiomeScreen Vignette
# ------------------------------------------------------------------------------
rm(list = ls())
library(devtools)
devtools::install_github("iChronostasis/CrcBiomeScreen",force = TRUE)
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("iChronostasis/CrcBiomeScreen",force = TRUE)
getwd(0)
getwd()
# ------------------------------------------------------------------------------
# Start the CrcBiomeScreening workflow
# Load required libraries
library(CrcBiomeScreen)
library(ggplot2)
library(dplyr)
# ------------------------------------------------------------------------------
## Get the toy data from curatedMetagenomicData
library(curatedMetagenomicData)
toydata <- curatedMetagenomicData(
"ThomasAM_2018a.relative_abundance"
, dryrun = FALSE, rownames = "short")
remove.packages("CrcBiomeScreen")
# ------------------------------------------------------------------------------
# Start the CrcBiomeScreening workflow
# Load required libraries
library(CrcBiomeScreen)
# ------------------------------------------------------------------------------
## Get the data from Dataset folder (from curatedMetagenomicData)
toydata <- curatedMetagenomicData(
"ThomasAM_2018a.relative_abundance"
, dryrun = FALSE, rownames = "short")
save(toydata, file = "Dataset/toydata.RData")
# ------------------------------------------------------------------------------
## Get the data from Dataset folder (from curatedMetagenomicData)
load("Dataset/toydata.RData")
## Create the CrcBiomeScreenObject
CrcBiomeScreenObject <- CreateCrcBiomeScreenObject(RelativeAbundance = toydata[[1]]@assays@data@listData$relative_abundance,
TaxaData = toydata[[1]]@rowLinks$nodeLab,
SampleData = toydata[[1]]@colData)
## Split the taxa into multiple levels
CrcBiomeScreenObject <- SplitTaxas(CrcBiomeScreenObject)
## Load the validation data from curatedMetagenomicData
ValidationData_curated <- curatedMetagenomicData(
paste0("ZellerG_2014",".","relative_abundance")
, dryrun = FALSE, rownames = "short")
save(ValidationData_curated, file = "Dataset/ValidationData_curated.RData")
devtools::install_github("iChronostasis/CrcBiomeScreen",force = TRUE)
# ------------------------------------------------------------------------------
# Start the CrcBiomeScreening workflow
# Load required libraries
library(CrcBiomeScreen)
library(ggplot2)
library(dplyr)
# ------------------------------------------------------------------------------
## Load the data from Dataset folder (from curatedMetagenomicData)
load("Dataset/toydata.RData")
## Create the CrcBiomeScreenObject
CrcBiomeScreenObject <- CreateCrcBiomeScreenObject(RelativeAbundance = toydata[[1]]@assays@data@listData$relative_abundance,
TaxaData = toydata[[1]]@rowLinks$nodeLab,
SampleData = toydata[[1]]@colData)
## Split the taxa into multiple levels
CrcBiomeScreenObject <- SplitTaxas(CrcBiomeScreenObject)
.rs.restartR()
# CrcBiomeScreen Vignette
# ------------------------------------------------------------------------------
rm(list = ls())
library(devtools)
devtools::install_github("iChronostasis/CrcBiomeScreen",force = TRUE)
library(devtools)
# ------------------------------------------------------------------------------
# Start the CrcBiomeScreening workflow
# Load required libraries
library(CrcBiomeScreen)
library(ggplot2)
library(dplyr)
# ------------------------------------------------------------------------------
## Load the data from Dataset folder (from curatedMetagenomicData)
load("Dataset/toydata.RData")
## Create the CrcBiomeScreenObject
CrcBiomeScreenObject <- CreateCrcBiomeScreenObject(RelativeAbundance = toydata[[1]]@assays@data@listData$relative_abundance,
TaxaData = toydata[[1]]@rowLinks$nodeLab,
SampleData = toydata[[1]]@colData)
## Split the taxa into multiple levels
CrcBiomeScreenObject <- SplitTaxas(CrcBiomeScreenObject)
## Keep only the genus level data
CrcBiomeScreenObject <- KeepGenusLevel(CrcBiomeScreenObject)
## Normalize the data using GMPR/TSS
CrcBiomeScreenObject <- NormalizeData(CrcBiomeScreenObject, method = "GMPR")
CrcBiomeScreenObject <- NormalizeData(CrcBiomeScreenObject, method = "TSS")
## Load the validation data from Dataset folder (from curatedMetagenomicData)
load("Dataset/ValidationData_curated.RData")
## Create the CrcBiomeScreenObject for validation data
ValidationData <- CreateCrcBiomeScreenObject(RelativeAbundance = ValidationData_curated[[1]]@assays@data@listData$relative_abundance,
TaxaData = ValidationData_curated[[1]]@rowLinks$nodeLab,
SampleData = ValidationData_curated[[1]]@colData)
## Split the taxa into multiple levels
ValidationData <- SplitTaxas(ValidationData)
## Keep only the genus level data
ValidationData <- KeepGenusLevel(ValidationData)
## Normalize the validation data using GMPR/TSS
ValidationData <- NormalizeData(ValidationData, method = "GMPR")
vignette("CrcBiomeScreen")
## Usage
* Run the vignette to see how to use this workflow.
browseVignettes("CrcBiomeScreen")
usethis::use_vignette("vignette")
# 安装 CRAN 版的 {renv}
install.packages("renv")
# 初始化环境
renv::init()
renv::snapshot()
usethis::use_readme_md()
install.packages("styler")
# 对整个包进行代码美化
styler::style_pkg()
install.packages("lintr")
# 对整个包进行不符合规范的代码查询（当然，都没有写多少代码，当然不会出现什么错误结果）
lintr::lint_package()
lintr::lint_package()
# 设定环境
usethis::use_testthat()
usethis::use_test()
# 轻量版检查
devtools::check()
usethis::use_tidy_github_actions()
Sys.setenv(GITHUB_PAT = "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")
usethis::use_tidy_github_actions()
devtools::build_rmd()
---
title: "Screening Tools for Microbiome Data Analysis in Colorectal Cancer Studies"
---
title: "Screening Tools for Microbiome Data Analysis in Colorectal Cancer Studies"
---
title: "Screening Tools for Microbiome Data Analysis in Colorectal Cancer Studies"
---
title: "Screening Tools for Microbiome Data Analysis in Colorectal Cancer Studies"
install.packages("BiocStyle")
?BiocStyle
BiocManager::install("BiocStyle")
library(BiocStyle)
# Load required libraries
library(CrcBiomeScreen)
remotes::install_github("yiluheihei/microbiomeMarker")
# Load required libraries
library(CrcBiomeScreen)
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("iChronostasis/CrcBiomeScreen",force = TRUE)
# Load required libraries
library(CrcBiomeScreen)
library(CrcBiomeScreen)
library(ggplot2)
library(dplyr)
load("Dataset/toydata.RData")
## Usage
* Run the vignette to see how to use this workflow.
vignette("CrcBiomeScreen")
devtools::install_github("iChronostasis/CrcBiomeScreen",force = TRUE)
# ------------------------------------------------------------------------------
# Start the CrcBiomeScreening workflow
# Load required libraries
library(CrcBiomeScreen)
library(ggplot2)
library(dplyr)
vignette("CrcBiomeScreen")
devtools::install_github("iChronostasis/CrcBiomeScreen",force = TRUE)
# ------------------------------------------------------------------------------
# Start the CrcBiomeScreening workflow
# Load required libraries
library(CrcBiomeScreen)
vignette("CrcBiomeScreen")
vignette("CrcBiomeScreen.Rmd")
## Usage
* Run the vignette to see how to use this workflow.
vignette("vignettes/CrcBiomeScreen.Rmd")
devtools::install(build_vignettes = TRUE)
vignette("CrcBiomeScreen")
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
devtools::build_vignettes()
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
vignette("vignettes/CrcBiomeScreen.Rmd")
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)、
library(devtools)
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
Sys.setenv(GITHUB_PAT = "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")
library(devtools)
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
library(CrcBiomeScreen)
vignette("vignettes/CrcBiomeScreen.Rmd")
devtools::build_vignettes()
devtools::install_github("iChronostasis/CrcBiomeScreen",force = TRUE)
# ------------------------------------------------------------------------------
# Start the CrcBiomeScreening workflow
# Load required libraries
library(CrcBiomeScreen)
library(ggplot2)
library(dplyr)
vignette("vignettes/CrcBiomeScreen.Rmd")
vignette("CrcBiomeScreen.Rmd")
usethis::use_vignette("my-vignette")
usethis::use_vignette("CrcBiomeScreen")
devtools::document()
devtools::install()
devtools::document()
devtools::install_github("iChronostasis/CrcBiomeScreen",force = TRUE)
# ------------------------------------------------------------------------------
# Start the CrcBiomeScreening workflow
# Load required libraries
library(CrcBiomeScreen)
library(ggplot2)
library(dplyr)
vignette("vignettes/CrcBiomeScreen.Rmd")
vignette(all = TRUE)
## Usage
* Run the vignette to see how to use this workflow.
vignette("vignettes/CrcBiomeScreen.Rmd", package = "CrcBiomeScreen")
vignette("CrcBiomeScreen.Rmd", package = "CrcBiomeScreen")
devtools::install_github("iChronostasis/CrcBiomeScreen",force = TRUE,build_vignettes = TRUE)
# ------------------------------------------------------------------------------
# Start the CrcBiomeScreening workflow
# Load required libraries
library(CrcBiomeScreen)
library(ggplot2)
library(dplyr)
vignette("CrcBiomeScreen.Rmd", package = "CrcBiomeScreen")
vignette("vignettes/CrcBiomeScreen.Rmd")
vignette(package = "CrcBiomeScreen")
devtools::install(build_vignettes = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
library(devtools)
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
Sys.setenv(GITHUB_PAT = "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")
library(devtools)
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
library(CrcBiomeScreen)
library(ggplot2)
library(dplyr)
vignette("CrcBiomeScreen.Rmd", package = "CrcBiomeScreen")
library(CrcBiomeScreen)
devtools::install(build_vignettes = TRUE)
library(devtools)
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
library(CrcBiomeScreen)
devtools::install(build_vignettes = TRUE)
library(CrcBiomeScreen)
devtools::install(build_vignettes = TRUE)
vignette("CrcBiomeScreen.Rmd", package = "CrcBiomeScreen")
remove.packages("CrcBiomeScreen")
devtools::install(build_vignettes = TRUE)
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
## Usage
* Run the vignette to see how to use this workflow.
library(CrcBiomeScreen)
vignette("CrcBiomeScreen.Rmd")
devtools::install(build_vignettes = TRUE)
remove.packages("CrcBiomeScreen")
unlink("/Users/Aurora/Library/Caches/org.R-project.R/R/renv/library/", recursive = TRUE)
devtools::clean_dll()
devtools::install(build_vignettes = TRUE, force = TRUE)
unlink(tempdir(), recursive = TRUE)
devtools::clean_dll()
devtools::install(build_vignettes = TRUE, force = TRUE)
library(CrcBiomeScreen)
library(devtools)
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
Sys.setenv(GITHUB_PAT = "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")
Sys.setenv(GITHUB_PAT = "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")
devtools::install(build_vignettes = TRUE)
library(devtools)
.libPaths()
devtools::install_github("iChronostasis/CrcBiomeScreen",force = TRUE)
library(devtools)
install.packages("devtools")
renv::deactivate()
install.packages("devtools")
devtools::install_github("iChronostasis/CrcBiomeScreen",force = TRUE)
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("iChronostasis/CrcBiomeScreen",force = TRUE)
# ------------------------------------------------------------------------------
# Start the CrcBiomeScreening workflow
# Load required libraries
library(CrcBiomeScreen)
library(ggplot2)
library(dplyr)
# ------------------------------------------------------------------------------
## Load the data from Dataset folder (from curatedMetagenomicData)
load("Dataset/toydata.RData")
## Create the CrcBiomeScreenObject
CrcBiomeScreenObject <- CreateCrcBiomeScreenObject(RelativeAbundance = toydata[[1]]@assays@data@listData$relative_abundance,
TaxaData = toydata[[1]]@rowLinks$nodeLab,
SampleData = toydata[[1]]@colData)
vignette("CrcBiomeScreen.Rmd", package = "CrcBiomeScreen")
library(CrcBiomeScreen)
vignette("CrcBiomeScreen.Rmd")
## Usage
* Run the vignette to see how to use this workflow.
vignette("vignettes/CrcBiomeScreen.Rmd")
devtools::install_github("iChronostasis/CrcBiomeScreen",force = TRUE)
library(CrcBiomeScreen)
vignette("vignettes/CrcBiomeScreen.Rmd")
vignette("CrcBiomeScreen.Rmd")
devtools::install(build_vignettes = TRUE)
vignette("CrcBiomeScreen.Rmd", package = "CrcBiomeScreen")
browseVignettes()
install(build_vignettes = TRUE)
devtools::build_rmd("vignettes/my-CrcBiomeScreen.Rmd")
devtools::build_rmd("vignettes/CrcBiomeScreen.Rmd")
## Installation
### Install the R packages repository
```R
Or you could choose construct the environment by using the conda:
library(devtools)
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
library(CrcBiomeScreen)
devtools::build_rmd("vignettes/CrcBiomeScreen.Rmd")
vignette("vignettes/CrcBiomeScreen.Rmd")
install(build_vignettes = TRUE)
vignette("CrcBiomeScreen.Rmd")
devtools::install(build_vignettes = TRUE)
vignette("CrcBiomeScreen")
browseVignettes("CrcBiomeScreen")
install.packages(c("devtools", "remotes", "knitr", "rmarkdown"))
install.packages(c("devtools", "remotes", "knitr", "rmarkdown"))
install.packages(c("devtools", "remotes", "knitr", "rmarkdown"))
remotes::install_local(".", build_vignettes = TRUE, force = TRUE)
1
library(CrcBiomeScreen)
vignette("CrcBiomeScreen")
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
library(CrcBiomeScreen)
vignette("CrcBiomeScreen")
## Usage
* Run the vignette to see how to use this workflow.
devtools::install(build_vignettes = TRUE)
## Usage
* Run the vignette to see how to use this workflow.
vignette("CrcBiomeScreen")
library(devtools)
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
library(CrcBiomeScreen)
devtools::install(build_vignettes = TRUE)
vignette("CrcBiomeScreen")
devtools::install(build_vignettes = TRUE, force = TRUE)
install.packages("BiocStyle")
BiocManager::install("BiocStyle")
library(BiocStyle)
devtools::install(build_vignettes = TRUE, force = TRUE)
library(CrcBiomeScreen)
library(CrcBiomeScreen)
vignette("CrcBiomeScreen")
# Run complete screening workflow
CrcBiomeScreenObject <- RunScreening(
CrcBiomeScreenObject,
model = "RF",
partition = 0.7,
split.requirement = c(
label = c("control", "CRC"),
condition_col = "study_condition"
),
ClassBalance = TRUE,
n_cv = 10,
TaskName = "GMPR_toydata",
num_cores = 10,
ValidationData = ValidationData_filtered_qc,
TrueLabel = "CRC"
)
# ------------------------------------------------------------------------------
## Load the data from Dataset folder (from curatedMetagenomicData)
load("Dataset/toydata.RData")
## Create the CrcBiomeScreenObject
CrcBiomeScreenObject <- CreateCrcBiomeScreenObject(RelativeAbundance = toydata[[1]]@assays@data@listData$relative_abundance,
TaxaData = toydata[[1]]@rowLinks$nodeLab,
SampleData = toydata[[1]]@colData)
## Split the taxa into multiple levels
CrcBiomeScreenObject <- SplitTaxas(CrcBiomeScreenObject)
## Keep only the genus level data
CrcBiomeScreenObject <- KeepGenusLevel(CrcBiomeScreenObject)
# ------------------------------------------------------------------------------
# Run the screening workflow by using one function
CrcBiomeScreenObject <- RunScreening(CrcBiomeScreenObject,
model = "RF",
partition = 0.7,
split.requirement =
c(label = c("control","CRC"),
condition_col = "study_condition"),
ClassBalance = TRUE,
n_cv = 10,
TaskName = "GMPR_toydata",
num_cores = 10,
ValidationData = ValidationData_filtered_qc,
TrueLabel = "CRC")
#'     c(
#'       label = c("control", "CRC"),
#'       condition_col = "study_condition"
#'     ),
#'   TaskName = "GMPR_NHSBCSP",
#'   num_cores = 10,
#'   ValidationData = ValidationData,
#'   TrueLabel = "Cancer"
#' )
#'
RunScreening <- function(obj,
model_type = NULL, # c("RF", "XGBoost")
split.requirement = NULL, # c(label = c("control","CRC"),  condition_col = "study_condition")
TaskName = TaskName,
partition = NULL,
ClassBalance = NULL,
n_cv = NULL,
ValidationData = NULL,
TrueLabel = NULL,
num_cores = NULL) {
# obj <- NormalizeData(obj, method = normalize_method)
obj <- SplitDataSet(obj, split.requirement, partition = partition)
obj <- TrainModels(obj, model_type = model_type, TaskName = TaskName, TrueLabel = TrueLabel, num_cores = num_cores, ClassBalance = ClassBalance, n_cv = n_cv)
obj <- EvaluateModel(obj, model_type = model_type, TaskName = paste0(TaskName, "_Test"), TrueLabel = TrueLabel, PlotAUC = TRUE)
obj <- ValidateModelOnData(obj, model_type = model_type, ValidationData = ValidationData, TaskName = paste0(TaskName, "_Validation"), TrueLabel = TrueLabel, PlotAUC = TRUE)
return(obj)
}
# ------------------------------------------------------------------------------
# Run the screening workflow by using one function
CrcBiomeScreenObject <- RunScreening(CrcBiomeScreenObject,
model = "RF",
partition = 0.7,
split.requirement =
c(label = c("control","CRC"),
condition_col = "study_condition"),
ClassBalance = TRUE,
n_cv = 10,
TaskName = "GMPR_toydata",
num_cores = 10,
ValidationData = ValidationData_filtered_qc,
TrueLabel = "CRC")
# Split the taxa into multiple levels
CrcBiomeScreenObject <- SplitTaxas(CrcBiomeScreenObject)
library(CrcBiomeScreen)
library(ggplot2)
library(dplyr)
# Split the taxa into multiple levels
CrcBiomeScreenObject <- SplitTaxas(CrcBiomeScreenObject)
# Load the toy dataset from curatedMetagenomicData
load("Dataset/toydata.RData")
# Create the CrcBiomeScreenObject
CrcBiomeScreenObject <- CreateCrcBiomeScreenObject(
RelativeAbundance = toydata[[1]]@assays@data@listData$relative_abundance,
TaxaData = toydata[[1]]@rowLinks$nodeLab,
SampleData = toydata[[1]]@colData
)
# Split the taxa into multiple levels
CrcBiomeScreenObject <- SplitTaxas(CrcBiomeScreenObject)
# Keep only the genus level data
CrcBiomeScreenObject <- KeepGenusLevel(CrcBiomeScreenObject)
# Normalize using GMPR (Geometric Mean of Pairwise Ratios)
CrcBiomeScreenObject <- NormalizeData(CrcBiomeScreenObject, method = "GMPR")
# Normalize using TSS (Total Sum Scaling)
CrcBiomeScreenObject <- NormalizeData(CrcBiomeScreenObject, method = "TSS")
# Load validation data
load("Dataset/ValidationData_curated.RData")
load("Dataset/toydata.RData")
load("Dataset/ValidationData_curated.RData")
# Load validation data
load("Dataset/ValidationData_curated.RData")
# Load validation data
load("Dataset/ValidationData_curated.RData")
# Load validation data
load("Dataset/ValidationData_curated.RData")
# Load validation data
load("Dataset/ValidationData_curated.RData")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
warning = FALSE,
fig.align = "center",
crop = NULL
)
library(devtools)
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
library(CrcBiomeScreen)
library(ggplot2)
library(dplyr)
# Set working directory
setwd("/home/CRCscreening/CRCscreening-Workflow/")
# Set working directory
# setwd("/home/CRCscreening/CRCscreening-Workflow/")
# Load the toy dataset from curatedMetagenomicData
load("Dataset/toydata.RData")
# Set working directory
# setwd("/home/CRCscreening/CRCscreening-Workflow/")
data(CrcBiomeScreen)
# Load the toy dataset from curatedMetagenomicData
load("Dataset/toydata.RData")
# Set working directory
# setwd("/home/CRCscreening/CRCscreening-Workflow/")
data(package = "CrcBiomeScreen")
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
library(devtools)
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
devtools::install_github("iChronostasis/CrcBiomeScreen", force = TRUE)
library(CrcBiomeScreen)

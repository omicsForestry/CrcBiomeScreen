#' The packaging function for XGBoost modeling without using class weights
#'
#' @param CrcBiomeScreenObject A \code{CrcBiomeScreenObject} containing normalized microbiome data, sample metadata, etc.
#' @param k.rf Set the number of cross validation
#' @param repeats Set the number of repeats in cross validation
#' @param TaskName A character string used to label the output
#' @param TrueLabel This label is the future prediction target
#' @param num_cores Set the number of the cores in parallel computing
#'
#' @importFrom dplyr mutate across
#' @importFrom foreach %dopar%
#' @importFrom doParallel makePSOCKcluster registerDoParallel stopCluster
#' @return CrcBiomeScreenObject
#' @export
#'
#' @examples CrcBiomeScreenObject <- ModelingXGBoost_noweights(
#'                                   CrcBiomeScreenObject = CrcBiomeScreenObject,
#'                                   k.rf = n_cv,
#'                                   TaskName = TaskName,
#'                                   TrueLabel = TrueLabel,
#'                                   num_cores = num_cores)
#'
ModelingXGBoost_noweights <- function(CrcBiomeScreenObject = NULL,
                                      k.rf = 10,
                                      repeats = 5,
                                      TaskName = NULL,
                                      TrueLabel = NULL,
                                      num_cores = num_cores) {
  set.seed(123)
  # Parallel setup（memory friendly）
  cl <- makePSOCKcluster(num_cores)
  doParallel::registerDoParallel(cl)

  # Prepare training data
  train_data <- CrcBiomeScreenObject$ModelData$Training
  label_train <- as.factor(CrcBiomeScreenObject$ModelData$TrainLabel)
  label_train <- factor(label_train, levels = unique(CrcBiomeScreenObject$ModelData$TrainLabel))

  # Define caret trainControl
  ctrl <- trainControl(
    method = "repeatedcv",
    number = k.rf,
    repeats = repeats,
    classProbs = TRUE,
    summaryFunction = twoClassSummary,
    allowParallel = TRUE
  )

  tune_grid <- expand.grid(
    nrounds = c(100, 200, 300),
    max_depth = c(3, 5, 7, 9),
    eta = c(0.01, 0.1, 0.3),
    gamma = 0,
    colsample_bytree = c(0.5, 0.75, 1),
    min_child_weight = 1,
    subsample = c(0.5, 0.75, 1)
  )

  train_data <- as.data.frame(train_data)
  train_data$label_train <- label_train

  # Train the model using caret
  set.seed(123)
  # Train the model using caret
  model_fit <- train(label_train ~ .,
    data = train_data,
    method = "xgbTree",
    metric = "ROC",
    trControl = ctrl,
    tuneGrid = tune_grid,
    verbose = TRUE
  )

  parallel::stopCluster(cl)
  foreach::registerDoSEQ()

  CrcBiomeScreenObject$ModelResult$XGBoost_noweights <- list(
    model = model_fit,
    bestTune = model_fit$bestTune
  )
  attr(CrcBiomeScreenObject$ModelResult$XGBoost_noweights, "TaskName") <- TaskName

  return(CrcBiomeScreenObject)
}

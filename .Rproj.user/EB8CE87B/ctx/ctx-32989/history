devtools::install()
packages <- c("stats","caret", "ranger", "progress", "doParallel", "future.apply",
"doFuture", "future", "foreach", "progressr", "dplyr",
"devtools","pROC", "GUniFrac", "Matrix","microbiomeMarker",
"curatedMetagenomicData","tidyr","dplyr","tibble","doParallel","foreach",
"ggplot2","phyloseq","ggpubr","ggrepel","ggplotify","ggtree",
"ape","BiocManager","microbiome","vegan","xgboost")
devtools::install()
devtools::install()
devtools::document()
devtools::load_all(reset = TRUE)
.rs.restartR()
devtools::document()
devtools::install()
?CreateCrcBiomeScreenObject
devtools::check()
devtools::check()
devtools::document()
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
devtools::document()
library(usethis)
usethis::use_test()
rm(list = ls())
# Load required libraries
source("R/Environment.R")
toydata <- curatedMetagenomicData(
"ThomasAM_2018a.relative_abundance"
, dryrun = FALSE, rownames = "short")
CrcBiomeScreenObject <- SplitTaxas(CrcBiomeScreenObject)
CrcBiomeScreenObject <- CreateCrcBiomeScreenObject(RelativeAbundance = toydata[[1]]@assays@data@listData$relative_abundance,
TaxaData = toydata[[1]]@rowLinks$nodeLab,
SampleData = toydata[[1]]@colData)
TaxaData = toydata[[1]]@rowLinks$nodeLab,
CreateCrcBiomeScreenObject <- function(AbsoluteAbundance = NULL, TaxaData = NULL, SampleData = NULL, RelativeAbundance = NULL) {
# If AbsoluteAbundance is NULL, check if RelativeAbundance is provided
if (!is.null(RelativeAbundance) && is.null(AbsoluteAbundance)) {
if (is.null(SampleData)) {
stop("SampleData is required to convert RelativeAbundance to AbsoluteAbundance.")
}
if (!"number_reads" %in% colnames(SampleData)) {
stop("SampleData must contain a 'number_reads' column to convert RelativeAbundance to AbsoluteAbundance.")
}
AbsoluteAbundance <- RelativeAbundance %>%
t() %>%
data.frame() %>%
mutate(across(seq_len(dim(RelativeAbundance)[2]), ~ (. * SampleData$number_reads / 100))) %>%
t() %>%
data.frame()
}
# Set up the object
obj <- list(
AbsoluteAbundance = AbsoluteAbundance,
TaxaData = TaxaData,
SampleData = SampleData,
RelativeAbundance = RelativeAbundance,
GenusLevelData = NULL,
ValidationData = NULL,
ModelData = NULL,
ModelResult = NULL,
EvaluateResult = list(
RF = NULL,
XGBoost = NULL
),
PredictResult = NULL
)
# Set up the name of the class
class(obj) <- "CrcBiomeScreenObject"
return(obj)
}
CrcBiomeScreenObject <- CreateCrcBiomeScreenObject(RelativeAbundance = toydata[[1]]@assays@data@listData$relative_abundance,
TaxaData = toydata[[1]]@rowLinks$nodeLab,
SampleData = toydata[[1]]@colData)
devtools::load_all()
test_that("Create the CrcBiomeScreenObject", {
expect_equal(CreateCrcBiomeScreenObject(RelativeAbundance = toydata[[1]]@assays@data@listData$relative_abundance,
TaxaData = toydata[[1]]@rowLinks$nodeLab,
SampleData = toydata[[1]]@colData), CrcBiomeScreenObject)
expect_failure(CreateCrcBiomeScreenObject("test"),
message("Wrong Input!"))
})
rel_abund <- toydata[[1]]@assays@data@listData$relative_abundance
expect_error(result <- CreateCrcBiomeScreenObject(RelativeAbundance = NULL,
TaxaData = NULL,
SampleData = NULL), "Wrong Input!")
expect_error(result <- CreateCrcBiomeScreenObject(RelativeAbundance = NULL,
TaxaData = NULL,
SampleData = sample_data), "Wrong Input!")
expect_error(result <- CreateCrcBiomeScreenObject(RelativeAbundance = NULL,
TaxaData = NULL,
SampleData = sample_data))
expect_error(CreateCrcBiomeScreenObject(RelativeAbundance = NULL,
TaxaData = NULL,
SampleData = sample_data))
CreateCrcBiomeScreenObject(RelativeAbundance = NULL,
TaxaData = NULL,
SampleData = sample_data)
#' @titile Create the CrcBiomeScreenObject for analysis
#' @description This function creates the CrcBiomeScreenObject to contain the data for analysis.
#' @param AbsoluteAbundance A numeric matrix or data frame containing absolute abundance data
#' @param TaxaData A data frame containing taxonomic information for each feature
#' @param SampleData A data frame containing sample metadata
#' @param RelativeAbundance A numeric matrix or data frame containing relative abundance data
#'
#' @return An object with data
#' @export
#'
#' @examples
#' toydata <- curatedMetagenomicData("ThomasAM_2018a.relative_abundance"
#'                                  , dryrun = FALSE, rownames = "short")
#'
#'CrcBiomeScreenObject <- CreateCrcBiomeScreenObject(RelativeAbundance = toydata[[1]]@assays@data@listData$relative_abundance,
#'                                                  TaxaData = toydata[[1]]@rowLinks$nodeLab,
#'                                                  SampleData = toydata[[1]]@colData)
CreateCrcBiomeScreenObject <- function(AbsoluteAbundance = NULL, TaxaData = NULL, SampleData = NULL, RelativeAbundance = NULL) {
# Check that at least one abundance matrix is provided
if (is.null(RelativeAbundance) && is.null(AbsoluteAbundance)) {
stop("Either RelativeAbundance or AbsoluteAbundance must be provided.")
}
# If only RelativeAbundance is provided, attempt to derive AbsoluteAbundance
if (!is.null(RelativeAbundance) && is.null(AbsoluteAbundance)) {
# SampleData is required for conversion
if (is.null(SampleData)) {
stop("SampleData is required to convert RelativeAbundance to AbsoluteAbundance.")
}
# SampleData must contain 'number_reads' column for scaling
if (!"number_reads" %in% colnames(SampleData)) {
stop("SampleData must contain 'number_reads' to convert RelativeAbundance to AbsoluteAbundance.")
}
# Convert RelativeAbundance (%) to AbsoluteAbundance by scaling with number of reads
AbsoluteAbundance <- RelativeAbundance %>%
t() %>%                       # Transpose to make samples as rows
data.frame() %>%
mutate(across(
seq_len(dim(RelativeAbundance)[2]),
~ (. * SampleData$number_reads / 100)  # Multiply by number_reads and scale from percent
)) %>%
t() %>%                       # Transpose back to original orientation (taxa x samples)
data.frame()
}
# Set up the object
obj <- list(
AbsoluteAbundance = AbsoluteAbundance,
TaxaData = TaxaData,
SampleData = SampleData,
RelativeAbundance = RelativeAbundance,
GenusLevelData = NULL,
ValidationData = NULL,
ModelData = NULL,
ModelResult = NULL,
EvaluateResult = list(
RF = NULL,
XGBoost = NULL
),
PredictResult = NULL
)
# Set up the name of the class
class(obj) <- "CrcBiomeScreenObject"
return(obj)
}
CreateCrcBiomeScreenObject(RelativeAbundance = NULL,
TaxaData = NULL,
SampleData = sample_data)
expect_error(CreateCrcBiomeScreenObject(RelativeAbundance = NULL,
TaxaData = NULL,
SampleData = sample_data))
check()
ues_test("tests/testthat/test-CreateCrcBiomeScreenObject.R")
testthat::use_test("tests/testthat/test-CreateCrcBiomeScreenObject.R")
use_testthat("tests/testthat/test-CreateCrcBiomeScreenObject.R")
usethis::use_testthat("tests/testthat/test-CreateCrcBiomeScreenObject.R")
test_that("CreateCrcBiomeScreenObject works correctly", {
toydata <- curatedMetagenomicData(
"ThomasAM_2018a.relative_abundance"
, dryrun = FALSE, rownames = "short")
rel_abund <- toydata[[1]]@assays@data@listData$relative_abundance
taxa_data <- toydata[[1]]@rowLinks$nodeLab
sample_data <- toydata[[1]]@colData
result <- CreateCrcBiomeScreenObject(
RelativeAbundance = rel_abund,
TaxaData = taxa_data,
SampleData = sample_data
)
expect_s3_class(result, "CrcBiomeScreenObject")
expect_error(CreateCrcBiomeScreenObject(RelativeAbundance = NULL,
TaxaData = NULL,
SampleData = sample_data))
})
use_testthat()
usethis::use_test()
styler:::set_style_transformers()
styler:::style_active_pkg()
use_git()
test("tests/testthat/test-CreateCrcBiomeScreenObject.R")
test("~/tests/testthat/test-CreateCrcBiomeScreenObject.R")
test("~/tests/testthat")
library(available)
library(available)
install.packages("available")
available("doofus")
library(available)
available("doofus")
library(available)
available::available("test")
devtools:install()
devtools:install()
library(devtools)
devtools:install()
devtools::install()
devtools::document()
devtools::install()
?SplitTaxas
SplitTaxas
#' Split the taxa information into different columns
#'
#' @param CrcBiomeScreenObject
#'
#' @return CrcBiomeScreenObject$TaxaData
#' @export
#'
#' @examples CrcBiomeScreenObject <- SplitTaxas(CrcBiomeScreenObject)
#'
#'
SplitTaxas <- function(CrcBiomeScreenObject) {
CrcBiomeScreenObject$TaxaData <-
CrcBiomeScreenObject$TaxaData %>%
tibble(variable = CrcBiomeScreenObject$TaxaData) %>%
separate(variable,
into = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = "\\|", fill = "right"
) %>%
mutate(across(everything(), ~ ifelse(. == "", NA, sub("^[a-z]__", "", .)))) %>%
as.data.frame()
return(CrcBiomeScreenObject)
}
?SplitTaxas
devtools::document()
devtools::install()
devtools::document()
.rs.restartR()
